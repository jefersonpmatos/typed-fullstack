/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * TYPED FULL STACK
 * Description
 * OpenAPI spec version: 0.1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  AddOrganizationMember201,
  AddOrganizationMember400,
  AddOrganizationMember404,
  AddOrganizationMember409,
  AddOrganizationMember500,
  AddOrganizationMemberBody,
  CreateOrganization201,
  CreateOrganization400,
  CreateOrganization409,
  CreateOrganization500,
  CreateOrganizationBody,
  DeleteOrganization204,
  DeleteOrganization400,
  DeleteOrganization404,
  DeleteOrganization409,
  DeleteOrganization500,
  GetAllOrganizations200Item,
  GetAllOrganizations400,
  GetAllOrganizations500,
  GetOrganization200,
  GetOrganization400,
  GetOrganization500,
  GetOrganizationMembers200Item,
  GetOrganizationMembers400,
  GetOrganizationMembers404,
  GetOrganizationMembers500,
  RemoveOrganizationMember204,
  RemoveOrganizationMember400,
  RemoveOrganizationMember404,
  RemoveOrganizationMember500,
  UpdateMemberRole200,
  UpdateMemberRole400,
  UpdateMemberRole404,
  UpdateMemberRole500,
  UpdateMemberRoleBody,
  UpdateOrganization200,
  UpdateOrganization400,
  UpdateOrganization404,
  UpdateOrganization500,
  UpdateOrganizationBody
} from './api.schemas';






/**
 * Create organization a new organization
 * @summary Create organization
 */
export const getCreateOrganizationUrl = () => {


  

  return `http://localhost:3333/organizations`
}

export const createOrganization = async (createOrganizationBody: CreateOrganizationBody, options?: RequestInit): Promise<CreateOrganization201> => {
  
  const res = await fetch(getCreateOrganizationUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      createOrganizationBody,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: CreateOrganization201 = body ? JSON.parse(body) : {}

  return data
}




export const getCreateOrganizationMutationOptions = <TError = CreateOrganization400 | CreateOrganization409 | CreateOrganization500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createOrganization>>, TError,{data: CreateOrganizationBody}, TContext>, fetch?: RequestInit}
): UseMutationOptions<Awaited<ReturnType<typeof createOrganization>>, TError,{data: CreateOrganizationBody}, TContext> => {

const mutationKey = ['createOrganization'];
const {mutation: mutationOptions, fetch: fetchOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, fetch: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createOrganization>>, {data: CreateOrganizationBody}> = (props) => {
          const {data} = props ?? {};

          return  createOrganization(data,fetchOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateOrganizationMutationResult = NonNullable<Awaited<ReturnType<typeof createOrganization>>>
    export type CreateOrganizationMutationBody = CreateOrganizationBody
    export type CreateOrganizationMutationError = CreateOrganization400 | CreateOrganization409 | CreateOrganization500

    /**
 * @summary Create organization
 */
export const useCreateOrganization = <TError = CreateOrganization400 | CreateOrganization409 | CreateOrganization500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createOrganization>>, TError,{data: CreateOrganizationBody}, TContext>, fetch?: RequestInit}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createOrganization>>,
        TError,
        {data: CreateOrganizationBody},
        TContext
      > => {

      const mutationOptions = getCreateOrganizationMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * Get all organizations
 * @summary Get all organizations
 */
export const getGetAllOrganizationsUrl = () => {


  

  return `http://localhost:3333/organizations`
}

export const getAllOrganizations = async ( options?: RequestInit): Promise<GetAllOrganizations200Item[]> => {
  
  const res = await fetch(getGetAllOrganizationsUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: GetAllOrganizations200Item[] = body ? JSON.parse(body) : {}

  return data
}



export const getGetAllOrganizationsQueryKey = () => {
    return [`http://localhost:3333/organizations`] as const;
    }

    
export const getGetAllOrganizationsQueryOptions = <TData = Awaited<ReturnType<typeof getAllOrganizations>>, TError = GetAllOrganizations400 | GetAllOrganizations500>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllOrganizations>>, TError, TData>>, fetch?: RequestInit}
) => {

const {query: queryOptions, fetch: fetchOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAllOrganizationsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllOrganizations>>> = ({ signal }) => getAllOrganizations({ signal, ...fetchOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAllOrganizations>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetAllOrganizationsQueryResult = NonNullable<Awaited<ReturnType<typeof getAllOrganizations>>>
export type GetAllOrganizationsQueryError = GetAllOrganizations400 | GetAllOrganizations500


export function useGetAllOrganizations<TData = Awaited<ReturnType<typeof getAllOrganizations>>, TError = GetAllOrganizations400 | GetAllOrganizations500>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllOrganizations>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllOrganizations>>,
          TError,
          Awaited<ReturnType<typeof getAllOrganizations>>
        > , 'initialData'
      >, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetAllOrganizations<TData = Awaited<ReturnType<typeof getAllOrganizations>>, TError = GetAllOrganizations400 | GetAllOrganizations500>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllOrganizations>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllOrganizations>>,
          TError,
          Awaited<ReturnType<typeof getAllOrganizations>>
        > , 'initialData'
      >, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetAllOrganizations<TData = Awaited<ReturnType<typeof getAllOrganizations>>, TError = GetAllOrganizations400 | GetAllOrganizations500>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllOrganizations>>, TError, TData>>, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get all organizations
 */

export function useGetAllOrganizations<TData = Awaited<ReturnType<typeof getAllOrganizations>>, TError = GetAllOrganizations400 | GetAllOrganizations500>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllOrganizations>>, TError, TData>>, fetch?: RequestInit}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetAllOrganizationsQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Update organization
 * @summary Update organization
 */
export const getUpdateOrganizationUrl = (id: string,) => {


  

  return `http://localhost:3333/organizations/${id}`
}

export const updateOrganization = async (id: string,
    updateOrganizationBody: UpdateOrganizationBody, options?: RequestInit): Promise<UpdateOrganization200> => {
  
  const res = await fetch(getUpdateOrganizationUrl(id),
  {      
    ...options,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      updateOrganizationBody,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: UpdateOrganization200 = body ? JSON.parse(body) : {}

  return data
}




export const getUpdateOrganizationMutationOptions = <TError = UpdateOrganization400 | UpdateOrganization404 | UpdateOrganization500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateOrganization>>, TError,{id: string;data: UpdateOrganizationBody}, TContext>, fetch?: RequestInit}
): UseMutationOptions<Awaited<ReturnType<typeof updateOrganization>>, TError,{id: string;data: UpdateOrganizationBody}, TContext> => {

const mutationKey = ['updateOrganization'];
const {mutation: mutationOptions, fetch: fetchOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, fetch: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateOrganization>>, {id: string;data: UpdateOrganizationBody}> = (props) => {
          const {id,data} = props ?? {};

          return  updateOrganization(id,data,fetchOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateOrganizationMutationResult = NonNullable<Awaited<ReturnType<typeof updateOrganization>>>
    export type UpdateOrganizationMutationBody = UpdateOrganizationBody
    export type UpdateOrganizationMutationError = UpdateOrganization400 | UpdateOrganization404 | UpdateOrganization500

    /**
 * @summary Update organization
 */
export const useUpdateOrganization = <TError = UpdateOrganization400 | UpdateOrganization404 | UpdateOrganization500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateOrganization>>, TError,{id: string;data: UpdateOrganizationBody}, TContext>, fetch?: RequestInit}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateOrganization>>,
        TError,
        {id: string;data: UpdateOrganizationBody},
        TContext
      > => {

      const mutationOptions = getUpdateOrganizationMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * Get organization
 * @summary Get organization
 */
export const getGetOrganizationUrl = (id: string,) => {


  

  return `http://localhost:3333/organizations/${id}`
}

export const getOrganization = async (id: string, options?: RequestInit): Promise<GetOrganization200> => {
  
  const res = await fetch(getGetOrganizationUrl(id),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: GetOrganization200 = body ? JSON.parse(body) : {}

  return data
}



export const getGetOrganizationQueryKey = (id?: string,) => {
    return [`http://localhost:3333/organizations/${id}`] as const;
    }

    
export const getGetOrganizationQueryOptions = <TData = Awaited<ReturnType<typeof getOrganization>>, TError = GetOrganization400 | GetOrganization500>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrganization>>, TError, TData>>, fetch?: RequestInit}
) => {

const {query: queryOptions, fetch: fetchOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrganizationQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrganization>>> = ({ signal }) => getOrganization(id, { signal, ...fetchOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrganization>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrganizationQueryResult = NonNullable<Awaited<ReturnType<typeof getOrganization>>>
export type GetOrganizationQueryError = GetOrganization400 | GetOrganization500


export function useGetOrganization<TData = Awaited<ReturnType<typeof getOrganization>>, TError = GetOrganization400 | GetOrganization500>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrganization>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrganization>>,
          TError,
          Awaited<ReturnType<typeof getOrganization>>
        > , 'initialData'
      >, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrganization<TData = Awaited<ReturnType<typeof getOrganization>>, TError = GetOrganization400 | GetOrganization500>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrganization>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrganization>>,
          TError,
          Awaited<ReturnType<typeof getOrganization>>
        > , 'initialData'
      >, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrganization<TData = Awaited<ReturnType<typeof getOrganization>>, TError = GetOrganization400 | GetOrganization500>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrganization>>, TError, TData>>, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get organization
 */

export function useGetOrganization<TData = Awaited<ReturnType<typeof getOrganization>>, TError = GetOrganization400 | GetOrganization500>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrganization>>, TError, TData>>, fetch?: RequestInit}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrganizationQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Delete organization by id
 * @summary Delete organization
 */
export const getDeleteOrganizationUrl = (id: string,) => {


  

  return `http://localhost:3333/organizations/${id}`
}

export const deleteOrganization = async (id: string, options?: RequestInit): Promise<DeleteOrganization204> => {
  
  const res = await fetch(getDeleteOrganizationUrl(id),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: DeleteOrganization204 = body ? JSON.parse(body) : {}

  return data
}




export const getDeleteOrganizationMutationOptions = <TError = DeleteOrganization400 | DeleteOrganization404 | DeleteOrganization409 | DeleteOrganization500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteOrganization>>, TError,{id: string}, TContext>, fetch?: RequestInit}
): UseMutationOptions<Awaited<ReturnType<typeof deleteOrganization>>, TError,{id: string}, TContext> => {

const mutationKey = ['deleteOrganization'];
const {mutation: mutationOptions, fetch: fetchOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, fetch: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteOrganization>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deleteOrganization(id,fetchOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteOrganizationMutationResult = NonNullable<Awaited<ReturnType<typeof deleteOrganization>>>
    
    export type DeleteOrganizationMutationError = DeleteOrganization400 | DeleteOrganization404 | DeleteOrganization409 | DeleteOrganization500

    /**
 * @summary Delete organization
 */
export const useDeleteOrganization = <TError = DeleteOrganization400 | DeleteOrganization404 | DeleteOrganization409 | DeleteOrganization500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteOrganization>>, TError,{id: string}, TContext>, fetch?: RequestInit}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteOrganization>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDeleteOrganizationMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * Add member to organization
 * @summary Add member to organization
 */
export const getAddOrganizationMemberUrl = (id: string,) => {


  

  return `http://localhost:3333/organizations/${id}/members`
}

export const addOrganizationMember = async (id: string,
    addOrganizationMemberBody: AddOrganizationMemberBody, options?: RequestInit): Promise<AddOrganizationMember201> => {
  
  const res = await fetch(getAddOrganizationMemberUrl(id),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      addOrganizationMemberBody,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: AddOrganizationMember201 = body ? JSON.parse(body) : {}

  return data
}




export const getAddOrganizationMemberMutationOptions = <TError = AddOrganizationMember400 | AddOrganizationMember404 | AddOrganizationMember409 | AddOrganizationMember500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addOrganizationMember>>, TError,{id: string;data: AddOrganizationMemberBody}, TContext>, fetch?: RequestInit}
): UseMutationOptions<Awaited<ReturnType<typeof addOrganizationMember>>, TError,{id: string;data: AddOrganizationMemberBody}, TContext> => {

const mutationKey = ['addOrganizationMember'];
const {mutation: mutationOptions, fetch: fetchOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, fetch: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof addOrganizationMember>>, {id: string;data: AddOrganizationMemberBody}> = (props) => {
          const {id,data} = props ?? {};

          return  addOrganizationMember(id,data,fetchOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AddOrganizationMemberMutationResult = NonNullable<Awaited<ReturnType<typeof addOrganizationMember>>>
    export type AddOrganizationMemberMutationBody = AddOrganizationMemberBody
    export type AddOrganizationMemberMutationError = AddOrganizationMember400 | AddOrganizationMember404 | AddOrganizationMember409 | AddOrganizationMember500

    /**
 * @summary Add member to organization
 */
export const useAddOrganizationMember = <TError = AddOrganizationMember400 | AddOrganizationMember404 | AddOrganizationMember409 | AddOrganizationMember500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addOrganizationMember>>, TError,{id: string;data: AddOrganizationMemberBody}, TContext>, fetch?: RequestInit}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof addOrganizationMember>>,
        TError,
        {id: string;data: AddOrganizationMemberBody},
        TContext
      > => {

      const mutationOptions = getAddOrganizationMemberMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * Get all members of an organization
 * @summary Get organization members
 */
export const getGetOrganizationMembersUrl = (id: string,) => {


  

  return `http://localhost:3333/organizations/${id}/members`
}

export const getOrganizationMembers = async (id: string, options?: RequestInit): Promise<GetOrganizationMembers200Item[]> => {
  
  const res = await fetch(getGetOrganizationMembersUrl(id),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: GetOrganizationMembers200Item[] = body ? JSON.parse(body) : {}

  return data
}



export const getGetOrganizationMembersQueryKey = (id?: string,) => {
    return [`http://localhost:3333/organizations/${id}/members`] as const;
    }

    
export const getGetOrganizationMembersQueryOptions = <TData = Awaited<ReturnType<typeof getOrganizationMembers>>, TError = GetOrganizationMembers400 | GetOrganizationMembers404 | GetOrganizationMembers500>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrganizationMembers>>, TError, TData>>, fetch?: RequestInit}
) => {

const {query: queryOptions, fetch: fetchOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrganizationMembersQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrganizationMembers>>> = ({ signal }) => getOrganizationMembers(id, { signal, ...fetchOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrganizationMembers>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetOrganizationMembersQueryResult = NonNullable<Awaited<ReturnType<typeof getOrganizationMembers>>>
export type GetOrganizationMembersQueryError = GetOrganizationMembers400 | GetOrganizationMembers404 | GetOrganizationMembers500


export function useGetOrganizationMembers<TData = Awaited<ReturnType<typeof getOrganizationMembers>>, TError = GetOrganizationMembers400 | GetOrganizationMembers404 | GetOrganizationMembers500>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrganizationMembers>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrganizationMembers>>,
          TError,
          Awaited<ReturnType<typeof getOrganizationMembers>>
        > , 'initialData'
      >, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrganizationMembers<TData = Awaited<ReturnType<typeof getOrganizationMembers>>, TError = GetOrganizationMembers400 | GetOrganizationMembers404 | GetOrganizationMembers500>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrganizationMembers>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrganizationMembers>>,
          TError,
          Awaited<ReturnType<typeof getOrganizationMembers>>
        > , 'initialData'
      >, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetOrganizationMembers<TData = Awaited<ReturnType<typeof getOrganizationMembers>>, TError = GetOrganizationMembers400 | GetOrganizationMembers404 | GetOrganizationMembers500>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrganizationMembers>>, TError, TData>>, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get organization members
 */

export function useGetOrganizationMembers<TData = Awaited<ReturnType<typeof getOrganizationMembers>>, TError = GetOrganizationMembers400 | GetOrganizationMembers404 | GetOrganizationMembers500>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrganizationMembers>>, TError, TData>>, fetch?: RequestInit}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetOrganizationMembersQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Remove member from organization
 * @summary Remove member from organization
 */
export const getRemoveOrganizationMemberUrl = (organizationId: string,
    userId: string,) => {


  

  return `http://localhost:3333/organizations/${organizationId}/members/${userId}`
}

export const removeOrganizationMember = async (organizationId: string,
    userId: string, options?: RequestInit): Promise<RemoveOrganizationMember204> => {
  
  const res = await fetch(getRemoveOrganizationMemberUrl(organizationId,userId),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: RemoveOrganizationMember204 = body ? JSON.parse(body) : {}

  return data
}




export const getRemoveOrganizationMemberMutationOptions = <TError = RemoveOrganizationMember400 | RemoveOrganizationMember404 | RemoveOrganizationMember500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof removeOrganizationMember>>, TError,{organizationId: string;userId: string}, TContext>, fetch?: RequestInit}
): UseMutationOptions<Awaited<ReturnType<typeof removeOrganizationMember>>, TError,{organizationId: string;userId: string}, TContext> => {

const mutationKey = ['removeOrganizationMember'];
const {mutation: mutationOptions, fetch: fetchOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, fetch: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof removeOrganizationMember>>, {organizationId: string;userId: string}> = (props) => {
          const {organizationId,userId} = props ?? {};

          return  removeOrganizationMember(organizationId,userId,fetchOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type RemoveOrganizationMemberMutationResult = NonNullable<Awaited<ReturnType<typeof removeOrganizationMember>>>
    
    export type RemoveOrganizationMemberMutationError = RemoveOrganizationMember400 | RemoveOrganizationMember404 | RemoveOrganizationMember500

    /**
 * @summary Remove member from organization
 */
export const useRemoveOrganizationMember = <TError = RemoveOrganizationMember400 | RemoveOrganizationMember404 | RemoveOrganizationMember500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof removeOrganizationMember>>, TError,{organizationId: string;userId: string}, TContext>, fetch?: RequestInit}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof removeOrganizationMember>>,
        TError,
        {organizationId: string;userId: string},
        TContext
      > => {

      const mutationOptions = getRemoveOrganizationMemberMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * Update member role in organization
 * @summary Update member role in organization
 */
export const getUpdateMemberRoleUrl = (organizationId: string,
    userId: string,) => {


  

  return `http://localhost:3333/organizations/${organizationId}/members/${userId}`
}

export const updateMemberRole = async (organizationId: string,
    userId: string,
    updateMemberRoleBody: UpdateMemberRoleBody, options?: RequestInit): Promise<UpdateMemberRole200> => {
  
  const res = await fetch(getUpdateMemberRoleUrl(organizationId,userId),
  {      
    ...options,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      updateMemberRoleBody,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: UpdateMemberRole200 = body ? JSON.parse(body) : {}

  return data
}




export const getUpdateMemberRoleMutationOptions = <TError = UpdateMemberRole400 | UpdateMemberRole404 | UpdateMemberRole500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateMemberRole>>, TError,{organizationId: string;userId: string;data: UpdateMemberRoleBody}, TContext>, fetch?: RequestInit}
): UseMutationOptions<Awaited<ReturnType<typeof updateMemberRole>>, TError,{organizationId: string;userId: string;data: UpdateMemberRoleBody}, TContext> => {

const mutationKey = ['updateMemberRole'];
const {mutation: mutationOptions, fetch: fetchOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, fetch: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateMemberRole>>, {organizationId: string;userId: string;data: UpdateMemberRoleBody}> = (props) => {
          const {organizationId,userId,data} = props ?? {};

          return  updateMemberRole(organizationId,userId,data,fetchOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateMemberRoleMutationResult = NonNullable<Awaited<ReturnType<typeof updateMemberRole>>>
    export type UpdateMemberRoleMutationBody = UpdateMemberRoleBody
    export type UpdateMemberRoleMutationError = UpdateMemberRole400 | UpdateMemberRole404 | UpdateMemberRole500

    /**
 * @summary Update member role in organization
 */
export const useUpdateMemberRole = <TError = UpdateMemberRole400 | UpdateMemberRole404 | UpdateMemberRole500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateMemberRole>>, TError,{organizationId: string;userId: string;data: UpdateMemberRoleBody}, TContext>, fetch?: RequestInit}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateMemberRole>>,
        TError,
        {organizationId: string;userId: string;data: UpdateMemberRoleBody},
        TContext
      > => {

      const mutationOptions = getUpdateMemberRoleMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    